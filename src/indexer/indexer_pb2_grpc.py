# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import indexer.indexer_pb2 as indexer__pb2


class IndexerStub(object):
    """python -m grpc_tools.protoc -I../web --python_out=. --grpc_python_out=.
    ../web/tunnel.proto python -m grpc_tools.protoc -I../backend --python_out=.
    --grpc_python_out=. ../backend/tunnel.proto create json stringds

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_plugins = channel.unary_unary(
            "/Indexer/list_plugins",
            request_serializer=indexer__pb2.ListPluginsRequest.SerializeToString,
            response_deserializer=indexer__pb2.ListPluginsReply.FromString,
        )
        self.indexing = channel.unary_unary(
            "/Indexer/indexing",
            request_serializer=indexer__pb2.IndexingRequest.SerializeToString,
            response_deserializer=indexer__pb2.IndexingReply.FromString,
        )
        self.status = channel.unary_unary(
            "/Indexer/status",
            request_serializer=indexer__pb2.StatusRequest.SerializeToString,
            response_deserializer=indexer__pb2.StatusReply.FromString,
        )


class IndexerServicer(object):
    """python -m grpc_tools.protoc -I../web --python_out=. --grpc_python_out=.
    ../web/tunnel.proto python -m grpc_tools.protoc -I../backend --python_out=.
    --grpc_python_out=. ../backend/tunnel.proto create json stringds

    """

    def list_plugins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def indexing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_IndexerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "list_plugins": grpc.unary_unary_rpc_method_handler(
            servicer.list_plugins,
            request_deserializer=indexer__pb2.ListPluginsRequest.FromString,
            response_serializer=indexer__pb2.ListPluginsReply.SerializeToString,
        ),
        "indexing": grpc.unary_unary_rpc_method_handler(
            servicer.indexing,
            request_deserializer=indexer__pb2.IndexingRequest.FromString,
            response_serializer=indexer__pb2.IndexingReply.SerializeToString,
        ),
        "status": grpc.unary_unary_rpc_method_handler(
            servicer.status,
            request_deserializer=indexer__pb2.StatusRequest.FromString,
            response_serializer=indexer__pb2.StatusReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Indexer", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Indexer(object):
    """python -m grpc_tools.protoc -I../web --python_out=. --grpc_python_out=.
    ../web/tunnel.proto python -m grpc_tools.protoc -I../backend --python_out=.
    --grpc_python_out=. ../backend/tunnel.proto create json stringds

    """

    @staticmethod
    def list_plugins(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Indexer/list_plugins",
            indexer__pb2.ListPluginsRequest.SerializeToString,
            indexer__pb2.ListPluginsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def indexing(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Indexer/indexing",
            indexer__pb2.IndexingRequest.SerializeToString,
            indexer__pb2.IndexingReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def status(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Indexer/status",
            indexer__pb2.StatusRequest.SerializeToString,
            indexer__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
